---
title: Open Science Starter Pack
author: Filippo Gambarota
institute: "**\\@Winter School 4Ms**"
format:
  minimal-revealjs: default
date: 2025/02/17
date-format: long
bibliography: "`r filor::fil()$bib`"
csl: "`r filor::fil()$csl`"
final-slide: true
from: markdown+emoji
incremental: true
engine: knitr
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = FALSE,
                      dev = "svg",
                      fig.width = 7,
                      fig.asp = 0.618,
                      fig.align = "center",
                      comment = "#>")
```

```{r}
#| label: packages
#| include: false
library(ggplot2)
library(viridis)
library(kableExtra)
```

```{r}
#| label: ggplot2
#| include: false
mtheme <- function(size = 15){
  theme_minimal(base_size = size, 
                base_family = "sans") +
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5),
        strip.text = element_text(face = "bold"),
        panel.grid.minor = element_blank())
}

theme_set(mtheme())

# palettes
options(ggplot2.continuous.colour="viridis")
options(ggplot2.continuous.fill = "viridis")
scale_colour_discrete <- scale_colour_viridis_d
scale_fill_discrete <- scale_fill_viridis_d
```

# Doing research is hard...

## Doing research is hard...

- you have to **read** papers, textbooks, slides and track information
- you have to **plan** your experiment or research
- you have to **collect, organize and manage your data**
- you have to **analyze data**, create **figures** and **tables**
- you have to **write** reports, papers, slides, etc.
- you have to **keep track of reviews** from reviewers, co-authors, supervisor, etc.

## Doing research is hard...

![](img/meme-collage.png)

## Doing <u>reproducible</u> research is even harder :scream:

- organize and share data in a **comprehensive format**
- choose a **future-proof place** to share data
- analyze data using reproducible tools i.e., **scripting**
- create research reports in multiple formats: **slides**, **reports**, **papers**

# Examples of not optimal data sharing

## Sharing the dataset

You find a nice paper with an interesting dataset. There is an Open Science Framework link. Awesome! Let's open it:

. . .

![](img/bad-dataset.png)

## Sharing the dataset

Amazing! there is a single file on the OSF repository. Then you open the dataset:

. . .

```{r}
bad <- readxl::read_xlsx("files/bad-dataset.xlsx")
bad |> 
  filor::trim_df() |> 
  gt::gt()
```

## Sharing the dataset

Where is the data-dictionary? What are 0 and 1? How missing values are coded?

![](img/disappointment.gif){fig-align="center"}

## Sharing is important, but do it appropriately!

- Putting a dataset on OSF is not doing reproducible research. The dataset need to be usable
- Create a data dictionary with variables description and important details
- Add a README file with important information
- Prefer a plain-text format e.g., `csv`, `txt`, etc.

## `datadictionary`

The [`datadictionary`](https://cran.r-project.org/web/packages/datadictionary/datadictionary.pdf) package can be used to create a data dictionary starting from a dataframe.

```{r}
#| echo: true
#| eval: false
library(datadictionary)

# You can also specify labels with a named vector
iris.labels <- c(Sepal.Length = "Sepal length in mm",
                 Sepal.Width = "Sepal width in mm",
                 Petal.Length = "Petal length in mm",
                 Petal.Width = "Petal width in mm",
                 Species = "Species of iris")
create_dictionary(iris, var_labels = iris.labels)
```

## `datadictionary`

Then you can visualize, put in into a document or save as a separated file.

```{r}
library(datadictionary)

# You can also specify labels with a named vector
iris.labels <- c(Sepal.Length = "Sepal length in mm",
                 Sepal.Width = "Sepal width in mm",
                 Petal.Length = "Petal length in mm",
                 Petal.Width = "Petal width in mm",
                 Species = "Species of iris")
create_dictionary(iris, var_labels = iris.labels)
```

# Reproducibility starter pack {.section}
 
## Reproducibility starter pack :construction_worker:

. . .

- ### A general purpose (or flexible enough) [programming language]{.imp} such as `r icons::fontawesome("r-project")` or `r icons::fontawesome("python")`

. . .

- ### A [literate programming]{.imp} framework to integrate code and text

. . .

- ### A [version control system]{.imp} to track projects

. . .

- ### An [online repository]{.imp} for future-proof sharing

## Disclaimers

<center> **The best tool is the tool that does the job.** </center>

- But there are some features that makes a tool better in terms of reproducibility, reducing the probability of errors and improve your coding skills.
- There is nothing bad about using SPSS, Jasp or Jamovi. The real problem is that using a point-and-click software reduce the reproducibility. If you can use the scripting part, whatever the tool.
- A general suggestion is to invest some of your time learning/improving a programming language for data pre-processing, analysis and reporting (tables, figures, etc.)

# R Programming Language {.section}

## R

> R is a free software environment for statistical computing and graphics.

- (TBH) It is not a proper general purpose programming language (such as C++ or Python).
- R *packages* allow to do almost everything (file manager, image processing, webscraping, sending emails, coffee :smile:, etc.)
- It is free and open-source
- The community is wide, active thus solving problems is very easy
- Force you to learn scripting but the are R-based GUI software (e.g., JAMOVI)

## R - CRAN

The CRAN is the repository where package developers upload their packages and other users can install them.

<center>

```{r}
#| echo: false
knitr::include_url("https://cran.r-project.org/web/packages/")
```

</center>

. . .

> As the saying goes: if something exist, there is an R package for doing it! :smile:

## R - PYPL Index

```{r}
#| echo: false
#| output: asis
#| fig-cap: "Source: [https://pypl.github.io/PYPL.html](https://pypl.github.io/PYPL.html)"

knitr::include_graphics("img/r-pypl.png")
```

## R - PYPL Index

The popularity is on a different scale compared to Python but still increasing:

![Source: [https://pypl.github.io/PYPL.html](https://pypl.github.io/PYPL.html)
](img/pypl.svg){height=500}

## R or Python?

- Python is a very general-purpose language more powerful for general tasks.
- I find python very useful for programming experiments, image processing, automatizing tasks and interacting with the operating system
- R is still a little bit superior in terms of data manipulation and visualization. Python is faster and more powerful for complex models (e.g., machine learning, etc.)

## Positron

Sometimes Python is not so easy to setup. In addition is not as interactive as R (i.e., line by line evaluation). Posit (ex. R Studio) recently created [Positron](https://positron.posit.co/) that is a new IDE working with R and Python at the same way.

![](https://positron.posit.co/images/astropy.png){fig-align="center"}

## Modern R

- For purist programmers, R is weird: arrays starts with 1, object-oriented programming is hidden, a lot of built-in vectorized functions, etc. The [The R Inferno](https://www.burns-stat.com/pages/Tutor/R_inferno.pdf) book is really funny showing the strange R-stuff.
- Despite the weirdness, R is widely used because it is intuitive (for non-programmers) and made for statistics and data manipulation
- R is a language and as in spoken languages you can elegant, rude, ambiguous, funny, etc.
- There are some tips to improve the readability and reproducibility of your code

## Functional Programming

> In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions.

- Despite R can be used both with an **imperative** and **object-oriented approach**, the functional side is quite powerful.
- The basic idea is to decompose your code into small, testable and re-usable functions

## Functional Programming, example...

We have a dataset (`mtcars`) and we want to calculate the mean, median, standard deviation, minimum and maximum of each column and store the result in a table.

```{r}
#| echo: true
head(mtcars)
str(mtcars)
```

## Functional Programming

The standard (~imperative) option is using a `for` loop, iterating through columns, calculate the values and store into another data structure.

```{r}
#| echo: true
ncols <- ncol(mtcars)
means <- medians <- mins <- maxs <- rep(0, ncols)

for(i in 1:ncols){
  means[i] <- mean(mtcars[[i]])
  medians[i] <- median(mtcars[[i]])
  mins[i] <- min(mtcars[[i]])
  maxs[i] <- max(mtcars[[i]])
}

results <- data.frame(means, medians, mins, maxs)
results$col <- names(mtcars)

results
```

## Functional Programming

The main idea is to decompose the problem writing a function and loop over the columns of the dataframe:

```{r}
#| echo: true
summ <- function(x){
  data.frame(means = mean(x), 
             medians = median(x), 
             mins = min(x), 
             maxs = max(x))
}
ncols <- ncol(mtcars)
dfs <- vector(mode = "list", length = ncols)

for(i in 1:ncols){
  dfs[[i]] <- summ(mtcars[[i]])
}
```

## Functional Programming

```{r}
#| echo: true

results <- do.call(rbind, dfs)
results
```

## Functional Programming

The actual real functional way require using the built-in iteration tools `*apply`. In this way you avoid writing the verbose `for` loop.

```{r}
#| echo: true
results <- lapply(mtcars, summ)
results <- do.call(rbind, results)
results
```

## Functional Programming, `*apply`

- The `*apply` family is one of the best tool in R. The idea is pretty simple: apply a function to each element of a list. 
- The powerful side is that in R everything can be considered as a list. A vector is a list of single elements, a dataframe is a list of columns etc.
- Internally, R is still using a `for` loop but the verbose part (preallocation, choosing the iterator, indexing) is encapsulated into the `*apply` function.

. . .

```{r}
#| eval: false
#| echo: true
means <- rep(0, ncol(mtcars))
for(i in 1:length(means)){
  means[i] <- mean(mtcars[[i]])
}

# the same with sapply
means <- sapply(mtcars, mean)
```

## `for` loops are bad?

`for` loops are the core of each operation in R (and in every programming language). For complex operation thery are more readable and effective compared to `*apply`. In R we need extra care for writing efficent `for` loops.

Extremely slow, no preallocation:

```{r}
#| eval: false
#| echo: true
res <- c()
for(i in 1:1000){
  # do something
  res[i] <- x
}
```

Very fast, no difference compared to `*apply`

```{r}
#| eval: false
res <- rep(0, 1000)
for(i in 1:length(res)){
  # do something
  res[i] <- x
}
```

## With `*apply` you can do crazy stuff!

```{r}
#| echo: true
funs <- list(mean = mean, sd = sd, min = min, max = max, median = median)
sapply(funs, function(f) lapply(mtcars, function(x) f(x)))
```


## Why functional programming?

- We can write less and reusable code that can be shared and used in multiple projects
- The scripts are more compact, easy to modify and less error prone (imagine that you want to improve the `summ` function, you only need to change it once instead of touching the `for` loop)
- Functions can be easily and consistently documented (see [roxygen](https://cran.r-project.org/web/packages/roxygen2/vignettes/roxygen2.html) documentation) improving the reproducibility and readability of your code

## More about functional programming in R

- Advanced R by Hadley Wickham, section on Functional Programming ([https://adv-r.hadley.nz/fp.html](https://adv-r.hadley.nz/fp.html))
- Hands-On Programming with R by Garrett Grolemund [https://rstudio-education.github.io/hopr/](https://rstudio-education.github.io/hopr/)
- Hadley Wickham: [The Joy of Functional Programming (for Data Science)](https://www.youtube.com/watch?v=bzUmK0Y07ck)
- [Bruno Rodrigues Youtube Channel](https://www.youtube.com/@brodriguesco/videos)

. . .

<center>

::: {layout-ncol=2}
![Advanced R](img/advanced-r.jpg){width=200 fig-align="center"}
![Hands-on Programming With R](img/hand-on-programming.jpeg){width=200 fig-align="center"}
:::

</center>

## A more advanced approach, R packages

R packages are not only on CRAN. You can (pretty) easily create a package and put it on Github. For example, if you keep using some functions in your project, write a general version and put them into a package.

![[github.com/filippogambarota/filor](https://github.com/filippogambarota/filor)](img/filor.png)

## A more advanced approach, R packages

If your functions are project-specific you can define them into your scripts or write some R scripts only with functions and `source()` them into the global environment.

```
project/
├─ R/
│  ├─ utils.R
├─ analysis.R
```

And inside `utils.R` you have some functions:

```{r}
#| eval: false
#| echo: true

myfun <- function(x) {
  # something
}
```

Then you can load the function using `source("R/utils.R)` at the beginning of `analysis.R`:

```{r}
#| eval: false
#| echo: true
source("R/utils.R")
```

## Analysis project as R package

The R project structure is really interesting to organize a data analysis pipeline. In fact, you can use the project structure. @Vuorre2021-dr and @Marwick2018-zm describe in details the idea.

The general approach is:

1. Create an R Studio project `.Rproj` file
2. Create your directories, put scripts, data, etc.
3. Create an `R/` folder and put your scripts with functions
4. Create a `DESCRIPTION` file using `usethis::use_description(check_name = FALSE)`
5. Then you can load your functions without source and with `devtools::load_all()` (same as `library()`)

# Let's see an example!

## The Tidy approach

The `tidyverse` is a series of high-quality R packages to do modern data science:

::: {.nonincremental}
- data manipulation (`dplyr`, `tidyr`)
- plotting (`ggplot2`)
- reporting (`rmarkdown`)
- string manipulation (`stringr`)
- functionals (`purrr`)
- ...
:::

![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/tidyverse.svg){fig-align="center" width=400}

## The Tidy approach - Pipes

One of the great improvement from the `tidyverse` is the usage of the pipe `%>%` now introduced in base R as `|>`. You will se these symbols a lot when looking at modern R code.

. . .

The idea is very simple, the standard pattern to apply a function is `function(argument)`. The pipe can reverse the pattern as `argument |> function()`. Normally when we apply multiple functions progressively the pattern is this:

. . .

```{r}
#| eval: false
#| echo: true
x <- rnorm(100)
x <- round(x, 3)
x <- abs(x)
x <- as.character(x)
```

## The Tidy approach - Pipes

When using the pipe, we remove the redundand assignment `<-` pattern:

```{r}
#| eval: false
#| echo: true
x <- rnorm(100)
x |>
  round(3) |>
  abs() |>
  as.character()
```

The pipe can be read as *"from **x** apply `round`, then `abs`, etc.".* The first argument of the piped function is assumed to be the result of the previus call.

## More about the Tidy approach

The `tidy` approach contains tons of functions and packages. The overall philosophy can be deepen in the R for Data Science book.

![[https://r4ds.hadley.nz/](https://r4ds.hadley.nz/)](img/r4ds.jpg)

## ggplot2

Only an quick mention to `ggplot2` [https://ggplot2-book.org/](https://ggplot2-book.org/) (part of the `tidyverse`) that is an amazing package for data visualization following the *piping* and *tidy* approach. Is the implementation of the **grammar of graphics** idea.

```{r}
#| eval: false
#| echo: true

library(tidyverse)

iris |>
  mutate(wi = runif(n())) |>
  ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) +
  geom_point(aes(size = wi)) +
  geom_smooth(method = "lm", se = FALSE)
  guides(size = "none") +
  theme_minimal(15)
```

## ggplot2

```{r}
#| echo: false
library(tidyverse)
iris |>
  mutate(wi = runif(n())) |>
  ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) +
  geom_point(aes(size = wi)) +
  geom_smooth(method = "lm", se = FALSE) +
  guides(size = "none") +
  theme_minimal(15)
```

## Base R version

More verbose, more hard coding, more steps and intermediate objects.

```{r}
#| eval: false
#| echo: true
iris_l <- split(iris, iris$Species)
lms <- lapply(iris_l, function(x) lm(Petal.Width ~ Sepal.Length, data = x))

plot(iris$Sepal.Length, 
     iris$Petal.Width, 
     col = as.numeric(iris$Species), pch = 19)

abline(lms[[1]], col = 1, lwd = 2)
abline(lms[[2]], col = 2, lwd = 2)
abline(lms[[3]], col = 3, lwd = 2)

legend("topleft", legend = levels(iris$Species), fill = 1:3)
```

## Base R version

```{r}
#| echo: false

iris_l <- split(iris, iris$Species)
lms <- lapply(iris_l, function(x) lm(Petal.Width ~ Sepal.Length, data = x))

plot(iris$Sepal.Length, 
     iris$Petal.Width, 
     col = as.numeric(iris$Species), pch = 19)

abline(lms[[1]], col = 1, lwd = 2)
abline(lms[[2]], col = 2, lwd = 2)
abline(lms[[3]], col = 3, lwd = 2)

legend("topleft", legend = levels(iris$Species), fill = 1:3)
```

## More on ggplot2

The `ggplot2` book [https://ggplot2-book.org/](https://ggplot2-book.org/) is a great resource to produce high-quality, publication ready plots. Clearly, the advantage of producing the figures entirely writing code are immense in terms of reusability and reproducibility.

::: {layout-ncol=2}

![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/ggplot2.svg){width=300 fig-align="center"}

![](img/ggplot2.jpg){width=300 fig-align="center"}
:::

## Something crazy in the `tidyverse`

Without going into details, I want to show you a very interesting approach that you can do with the `tidyverse` functions.

Let's assume you want to do a leave-one-out analysis thus fitting the same models on a dataset, removing one observation at time.

You can do it in base R with a loop or other methods, but the see so-called *many-models* approach. See [https://r4ds.had.co.nz/many-models.html](https://r4ds.had.co.nz/many-models.html) and [https://www.youtube.com/watch?v=rz3_FDVt9eg](https://www.youtube.com/watch?v=rz3_FDVt9eg).

## Something crazy in the `tidyverse`

Let's define some functions:

```{r}
#| echo: true
leave1out <- function(data){
  idx <- 1:nrow(data)
  ll <- lapply(idx, function(i) data[-i, ])
  names(ll) <- paste0("no", idx)
  c(no0 = list(data), ll)
}

fit_model <- function(data){
  lm(Sepal.Length ~ Petal.Width, data = data)
}
```

## Something crazy in the `tidyverse`

```{r}
#| echo: true
dat <- tibble(data = leave1out(iris[1:20, ]))
dat |> 
  mutate(removed = names(data)) |> 
  head()
```

## Something crazy in the `tidyverse`

```{r}
dat |> 
  mutate(removed = names(data)) |> 
  mutate(fit = map(data, fit_model),
         results = map(fit, broom::tidy)) |> 
  head()
```

## Something crazy in the `tidyverse`

```{r}
#| eval: false
#| echo: true
dat |> 
  mutate(removed = names(data)) |> 
  mutate(fit = map(data, fit_model),
         results = map(fit, broom::tidy)) |> 
  unnest(results) |> 
  ggplot(aes(x = removed, y = estimate)) +
  geom_point() +
  geom_line() +
  facet_wrap(~term, scales = "free")
```

## Something crazy in the `tidyverse`

```{r}
#| echo: false
dat |> 
  mutate(removed = names(data)) |> 
  mutate(fit = map(data, fit_model),
         results = map(fit, broom::tidy)) |> 
  unnest(results) |> 
  ggplot(aes(x = parse_number(removed), y = estimate)) +
  geom_point() +
  geom_line() +
  facet_wrap(~term, scales = "free") +
  xlab("Removed")
```


## Quick tables

```{r}
gtsummary::tbl_summary(iris)
```

## Quick tables from models

```{r}
#| echo: true

fit <- lm(Sepal.Length ~ Petal.Width, data = iris)
sjPlot::tab_model(fit)
```

## Quick tables from models

```{r}
#| echo: true

gtsummary::tbl_regression(fit)
```

# Literate Programming {.section}

## Literate Programming^[[https://en.wikipedia.org/wiki/Literate_programming](https://en.wikipedia.org/wiki/Literate_programming)]

> Donald Knuth first defined literate programming as a script, notebook, or computational document that contains an explanation of the program logic in a natural language, interspersed with snippets of macros and source code, which can be compiled and rerun

For example **jupyter notebooks**, **R Markdown** and now **Quarto** are literate programming frameworks to integrate code and text.

![](img/lp.svg){fig-align="center"}

## Literate Programming, the markup language

Beyond the coding part, the markup language is the core element of a literate programming framework. The idea of a markup language is separating the result from what you actually write. Some examples are:

- LaTeX
- HTML
- Markdown
- XML
- ...

## LaTeX ^[[https://latexbase.com/](https://www.overleaf.com/project/6658541939d95ad2ae3d8c99)]

![](img/latex-example.png)

## HTML

```html
<!DOCTYPE html>
<html>
<body>

<h1>My First Heading</h1>

Lorem Ipsum è un testo segnaposto utilizzato nel settore della tipografia e della stampa. Lorem Ipsum è considerato il testo segnaposto standard sin dal sedicesimo secolo, quando un anonimo tipografo prese una cassetta di caratteri e li assemblò per preparare un testo campione. È sopravvissuto non solo a più di cinque secoli, ma anche al passaggio alla videoimpaginazione, pervenendoci sostanzialmente inalterato. Fu reso popolare, negli anni ’60, con la diffusione dei fogli di caratteri trasferibili “Letraset”, che contenevano passaggi del Lorem Ipsum, e più recentemente da software di impaginazione come Aldus PageMaker, che includeva versioni del Lorem Ipsum.

<h2>My Second Heading</h2>

Lorem Ipsum è un testo segnaposto utilizzato nel settore della tipografia e della stampa. 

Lorem Ipsum è considerato il testo segnaposto standard sin dal sedicesimo secolo, quando un anonimo 

tipografo prese una cassetta di caratteri e li assemblò per preparare un testo campione. 

È sopravvissuto non solo a più di cinque secoli, ma anche al passaggio alla videoimpaginazione, pervenendoci sostanzialmente inalterato. 

Fu reso popolare, negli anni ’60, con la diffusione dei 

fogli di caratteri trasferibili “Letraset”, che contenevano passaggi del Lorem Ipsum

più recentemente da software di impaginazione come Aldus PageMaker, che includeva versioni del Lorem Ipsum.

</body>
</html>
```

## Markdown^[[https://markdownlivepreview.com/](https://markdownlivepreview.com/)]

<iframe src="https://markdownlivepreview.com/" height="500" width="1000" style="border: 1px solid #464646;display:block;" allowfullscreen="" allow="autoplay"></iframe>

## Markdown

Markdown is one of the most popular markup languages for several reasons:

- easy to write and read compared to Latex and HTML
- easy to convert from Markdown to basically every other format using `pandoc`
- easy to implement new features

## Markdown (source code)

```markdown
## Markdown

Markdown is one of the most popular markup languages for several reasons:

- easy to write and read compared to Latex and HTML
- easy to convert from Markdown to basically every other format using `pandoc`
- easy to implement new features
```
. . .

Also the source code can be used, compared to Latex or HTML, to take notes and read. Latex and HTML need to be compiled otherwise they are very hard to read.

## What's wrong about Microsoft Word?

MS Word is a WYSIWYG (*what you see is what you get editor*) that force users to think about formatting, numbering, etc. Markup languages receive the content (plain text) and the rules and creates the final document.

:::: {.columns}
::: {.column width='50%'}

![](img/wordmeme1.jpg)

:::
::: {.column width='50%'}

![](img/wordmeme2.jpg)

:::
::::

## What's wrong about Microsoft Word?

Beyond the pure writing process, there are other aspects related to research data.

::: {.nonincremental}
- writing math formulas
- reporting statistics in the text
- producing tables
- producing plots
:::

In MS Word (or similar) we need to produce everything outside and then manually put figures and tables.

## The solution... Quarto

Quarto ([https://quarto.org/](https://quarto.org/)) is the evolution of R Markdown that integrate a programming language with the Markdown markup language. It is very simple but quite powerful.

<center>

:::: {.columns}
::: {.column width='50%'}

![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/rmarkdown.svg){width="300px"}

:::
::: {.column width='50%'}

![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/quarto.svg){width="300px"}

:::
::::

</center>

## Basic Markdown

Markdown can be learned in minutes. You can go to the following link [https://quarto.org/docs/authoring/markdown-basics.html](https://quarto.org/docs/authoring/markdown-basics.html) and try to understand the syntax.

<iframe src='https://quarto.org/docs/authoring/markdown-basics.html' style='width:1000px; height:500px;'></iframe>

# Let's see a practical example! {.section}

## More about Quarto and R Markdown

The topic is extremely vast. You can do everything in Quarto, a website, thesis, your CV, etc.

- Yihui Xie - R Markdown Cookbook [https://bookdown.org/yihui/rmarkdown-cookbook/](https://bookdown.org/yihui/rmarkdown-cookbook/)
- Yihui Xie - R Markdown: The Definitive Guide [https://bookdown.org/yihui/rmarkdown/](https://bookdown.org/yihui/rmarkdown/)
- Quarto documentation [https://quarto.org/docs/guide/](https://quarto.org/docs/guide/)

## Writing papers, `papaja`

![[https://github.com/crsh/papaja](https://github.com/crsh/papaja)](img/papaja.png)

## Writing papers, `apaquarto`

![[https://github.com/wjschne/apaquarto](https://github.com/wjschne/apaquarto)](img/apaquarto.png)

## Collaborating! (TBH not so easy)

The `trackdown` package can be used to collaborate on `Rmd` or `qmd` documents using Google Docs.

![[https://github.com/ClaudioZandonella/trackdown](https://github.com/ClaudioZandonella/trackdown)](img/trackdown.png)

## Collaborating! Overleaf

With Overleaf you can collaborate on `.tex` documents but also `.Rnw` documents. No `Rmd` or `qmd` unfortunately. See an [example document](https://www.overleaf.com/project/6759ac59ce1401a5fd86791b).

![](img/overleaf.png)

# Git and Github {.section}

## Git and Github

- The basic idea is to track changes within a folder, assign a `message` and eventually a `tag` to a specific version obtaining a version hystory. The version history is completely navigable, you can go back to a previous version of the code.
- The are advanced features like `branches` for creating an independent version of the project to test new features and then `merge` into the main streamline.
- The entire (local) Git project can be hosted on Github to improve collaboration. Other people or collaborators can `clone` the repository and `push` their changes to the project.

# Veeeery basic Git workflow {.section}

## Veeeery basic Git workflow

After installing Git, you can start a new repository opening a terminal on a folder and typing `git init`. The folder is now a git project you can notice by the hidden `.git` folder.

```bash
cd ~/some/folder
git init
```

Then you can `add` files to the staging area. Basically these files are ready to be `committed` i.e. "written" in the Git history.

```bash
git add file1.txt
# git add . # add everyting
```

Finally you can commit the modified version of the file using `git commit -m message`

```bash
git commit -m "my first amazing commit"
```

you can see the Git hystory with all your commits:

```bash
git log
```

## Github

Imagine to put everyting into a server with nice viewing options and advanced features. Github is just an hosting service for your `git` folder.

You can create an empty repository on Github named `git-test`. Now my repo has the path `git@github.com:filippogambarota/git-test.git`.

```bash
git remote add origin git@github.com:filippogambarota/git-test.git
git push
```

Now our local repository is linked with the remote repository. Every time we do `git push` our local commits will be uploaded.

If you worked on the repository from another machine or a colleague add some changes, you can do `git pull` and your local machine will be updated.

</br>

The repository `git-test` is online and can be seen here [filippogambarota/git-test](https://github.com/filippogambarota/git-test).

## Github

An now let's see on Github the result:

```{r}
#| fig-align: center
#| echo: false
knitr::include_graphics("img/git-test.png")
```

## More about Git and Github

There are a lot of resources online:

- The Open Science Manual - Zandonella and Massidda - [Git](https://arca-dpss.github.io/manual-open-science/git-chapter.html) and [Github](https://arca-dpss.github.io/manual-open-science/github-chapter.html) chapters.
- [https://agripongit.vincenttunru.com/](https://agripongit.vincenttunru.com/)
- [https://git-scm.com/docs/gittutorial](https://agripongit.vincenttunru.com/)

# Open Science Framework {.section}

## Open Science Framework

> OSF is a free, open platform to support your research and enable collaboration.

Is a great tool to upload and share materials with others and collaborate on a project. Similarly to Github you can track the changes made to a project.

The great addition is having a DOI thus the project is persistently online and can be cited.

It is now common practice to create a OSF project supporting a research paper and put the link within the paper containing supplementary materials, raw data, scripts etc.

![](img/osf.jpeg)

## Open Science Framework

It's very easy to create a new project, then you simply need to add files and share it.

![](img/osf-test.png)

The project can be accessed here (depending on the visibility) [https://osf.io/yf9tg/](https://osf.io/yf9tg/).

## Open Science Framework

### OSF and Github

An interesting feature is linking a Github repository to OSF. Now all changes made on Github (easier to manage) are mirrored into OSF. You can easily work in Github for the coding part and use OSF to upload other data or information and to assign a DOI to the project.

### Preprints

OSF is also linked to a popular service for preprints called PsyArXiv [https://psyarxiv.com/](https://psyarxiv.com/) thus you can link a preprint to an OSF project.

## More on OSF

- https://help.osf.io/article/342-getting-started-on-the-osf
- https://arca-dpss.github.io/manual-open-science/osf-chapter.html

## More on reproducibility

In general, I highly suggest the online book **The Open Science Manual** [https://arca-dpss.github.io/manual-open-science/](https://arca-dpss.github.io/manual-open-science/) written by my friend **Claudio Zandonella** and **Davide Massidda** where these and other topics are explained in details:

<center>

<iframe src='https://arca-dpss.github.io/manual-open-science/' style='width:1000px; height:500px;'></iframe>

</center>
